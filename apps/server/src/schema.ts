// Generated by Sophon Schema. Do not edit manually!
import { SophonInstance, SenderCore, SophonCore } from "@sophon-js/server";

////////////////////////////////////////
// Types
////////////////////////////////////////

export interface Person {
  name: string;
  age: number;
}

////////////////////////////////////////
// Services
////////////////////////////////////////

export interface SophonContext {}
export class MainServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
  ping(n: number) {
    this.sender.emit(this.room, "ping", n);
  }
}

export abstract class AbstractMainService {
  $: (room: string) => MainServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new MainServiceSender(sophonCore.senderCore, room);
  }
  abstract child: IChildService;
  abstract adder(
    ctx: SophonInstance<SophonContext>,
    x: number,
    y: number
  ): Promise<number>;
  abstract hello(
    ctx: SophonInstance<SophonContext>,
    p: Person
  ): Promise<string>;
}

export class ChildServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
  pong(s: string) {
    this.sender.emit(this.room, "child/pong", s);
  }
}

export abstract class AbstractChildService {
  $: (room: string) => ChildServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new ChildServiceSender(sophonCore.senderCore, room);
  }

  abstract hello(ctx: SophonInstance<SophonContext>): Promise<string>;
}

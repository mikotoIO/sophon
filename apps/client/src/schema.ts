// Generated by Sophon Schema. Do not edit manually!
import io, { Socket } from 'socket.io-client';


export interface Person {
  name: string;
  age: number;
}

class SocketClient {
  constructor(public socket: Socket) {}

  call(event: string, ...args: any[]): any {
    return new Promise((resolve) => {
      this.socket.emit(event, ...args, resolve);
    });
  }

  subscribe(ev: string, handler: any) {
    this.socket.on(ev, handler);
    return () => { this.socket.off(ev, handler); };
  }
}

class MainClient {
  readonly child: ChildClient;
  constructor(private socket: SocketClient) {
    this.child = new ChildClient(socket);
  }
  adder(x: number, y: number): Promise<number> {
    return this.socket.call('adder', x, y);
  }
  hello(p: Person): Promise<string> {
    return this.socket.call('hello', p);
  }

  ping(handler: (n: number) => void) {
    return this.socket.subscribe('ping', handler);
  }
}

class ChildClient {
  
  constructor(private socket: SocketClient) {
    
  }
  hello(): Promise<string> {
    return this.socket.call('child/hello', );
  }

  pong(handler: (s: string) => void) {
    return this.socket.subscribe('child/pong', handler);
  }
}

export function createClient(url: string) {
  return new Promise<MainClient>((resolve) => {
    const socket = io(url);

    socket.once('connect', () => {
      const socketClient = new SocketClient(socket);
      resolve(new MainClient(socketClient));
    });
  });
}

// Generated by Sophon Schema. Do not edit manually!
import io, { Socket } from 'socket.io-client';


export interface Person {
  name: string;
  age: number;
}

class SocketClient {
  constructor(public socket: Socket) {}

  call(event: string, ...args: any[]): any {
    return new Promise((resolve, reject) => {
      this.socket.emit(event, ...args, (x: any) => {
        if (x.err !== undefined) {
          reject(x.err);
        } else {
          resolve(x.ok);
        }
      });
    });
  }

  subscribe(ev: string, handler: any) {
    this.socket.on(ev, handler);
    return () => { this.socket.off(ev, handler); };
  }
}

export class MainServiceClient {
  readonly child: ChildServiceClient;
  constructor(private socket: SocketClient) {
    this.child = new ChildServiceClient(socket);
  }
  adder(x: number, y: number): Promise<number> {
    return this.socket.call('adder', x, y);
  }
  hello(p: Person): Promise<string> {
    return this.socket.call('hello', p);
  }

  ping(handler: (n: number) => void) {
    return this.socket.subscribe('ping', handler);
  }
}

export class ChildServiceClient {
  
  constructor(private socket: SocketClient) {
    
  }
  hello(): Promise<string> {
    return this.socket.call('child/hello', );
  }

  pong(handler: (s: string) => void) {
    return this.socket.subscribe('child/pong', handler);
  }
}

export function createClient(
  options: { url: string, params?: Record<string, string> },
  onConnect: (client: MainServiceClient) => void,
) {
  const socket = io(options.url, { query: options.params });

  socket.once('connect', () => {
    const socketClient = new SocketClient(socket);
    onConnect(new MainServiceClient(socketClient));
  });

  return () => { socket.disconnect(); }
}

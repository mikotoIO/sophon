struct User {
  id: string;
  name: string;
  avatar: string?;
  category: string?;
}

struct Role {
  id: string;
  name: string;
  color: string?;
  permissions: string;
  position: int;
}

struct Channel {
  id: string;
  spaceId: string;
  parentId: string?;
  name: string;
  order: int;
  lastUpdated: string?;
  type: string;
}

struct Space {
  id: string;
  name: string;
  icon: string?;
  channels: Channel[];
  roles: Role[];
  ownerId: string?;
}

struct Member {
  id: string;
  spaceId: string;
  user: User;
  roleIds: string[];
}

struct Message {
  id: string;
  content: string;
  timestamp: string;
  authorId: string?;
  author: User?;
  channelId: string;
}

struct Invite {
  code: string;
}

service MainService {
  spaces: SpaceService;
  channels: ChannelService;
  members: MemberService;
  users: UserService;
  messages: MessageService;
  roles: RoleService;
  voice: VoiceService;
  relations: RelationService;
}

struct SpaceUpdateOptions {
  name: string?;
  icon: string?;
}

service SpaceService {
  get(id: string): Space;
  list(): Space[];
  create(name: string): Space;
  update(id: string, options: SpaceUpdateOptions): Space;
  delete(id: string): void;

  ~onCreate(space: Space);
  ~onUpdate(space: Space);
  ~onDelete(space: Space);

  join(id: string): void;
  leave(id: string): void;
  createInvite(id: string): Invite;
  deleteInvite(code: string): void;
  listInvites(id: string): Invite[];
  
  addBot(spaceId: string, userId: string): void;
}

struct MemberUpdateOptions {
  roleIds: string[];
}

service MemberService {
  get(spaceId: string, userId: string): Member;
  list(spaceId: string): Member[];
  update(spaceId: string, userId: string, roleIds: MemberUpdateOptions): Member;
  delete(spaceId: string, userId: string): void;
}

struct UserUpdateOptions {
  name: string?;
  avatar: string?;
}

service UserService {
  me(): User;
  update(options: UserUpdateOptions): User;
}

struct ChannelCreateOptions {
  name: string;
  type: string;
  parentId: string?;
}

struct TypingEvent {
  channelId: string;
  userId: string;
  member: Member?;
}

service ChannelService {
  get(id: string): Channel;
  list(spaceId: string): Channel[];
  create(spaceId: string, options: ChannelCreateOptions): Channel;
  delete(id: string): void;
  move(id: string, order: int): void;

  ~onCreate(channel: Channel);
  ~onUpdate(channel: Channel);
  ~onDelete(channel: Channel);

  startTyping(channelId: string, duration: int): void;
  stopTyping(channelId: string): void;

  ~onTypingStart(event: TypingEvent);
  ~onTypingStop(event: TypingEvent);
}

struct ListMessageOptions {
  cursor: string?;
  limit: int;
}

struct MessageDeleteEvent {
  messageId: string;
  channelId: string;
}

service MessageService {
  list(channelId: string, options: ListMessageOptions): Message[];
  send(channelId: string, content: string): Message;
  delete(channelId: string, messageId: string): void;

  ~onCreate(message: Message);
  ~onUpdate(message: Message);
  ~onDelete(event: MessageDeleteEvent);
  ack(channelId: string, timestamp: string): void;
}

struct RoleEditPayload {
  name: string?;
  color: string?;
  permissions: string?;
  position: int?;
}

service RoleService {
  create(spaceId: string, name: string): Role;
  edit(id: string, edit: RoleEditPayload): Role;
  delete(id: string);
}

struct VoiceToken {
  url: string;
  channelId: string;
  token: string;
}

service VoiceService {
  join(channelId: string): VoiceToken;
}

struct Relations {
  
}

service RelationService {
  listOpen(): Relations[];
  open(userId: string): Relations;
}